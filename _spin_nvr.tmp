never pp {    /* !([] ((Rame1:posR1>=1))) */
T0_init:
	do
	:: atomic { (! (((Rame1:posR1>=1)))) -> assert(!(! (((Rame1:posR1>=1))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never p0 {    /* !([] (((Rame1:posR1!=Rame2:posR2)) || ((Rame1:dirR1!=Rame2:dirR2)))) */
T0_init:
	do
	:: atomic { (! ((((Rame1:posR1!=Rame2:posR2)) || ((Rame1:dirR1!=Rame2:dirR2))))) -> assert(!(! ((((Rame1:posR1!=Rame2:posR2)) || ((Rame1:dirR1!=Rame2:dirR2)))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never p3 {    /* !(((([] ((! (((Rame1:posR1!=1)) && ((Rame1:dirR1==-(1))))) || (((Rame1:dirR1==-(1))) U (((Rame1:posR1==1)) && ((Rame1:dirR1==1)))))) && ([] ((! (((Rame2:posR2!=1)) && ((Rame2:dirR2==-(1))))) || (((Rame2:dirR2==-(1))) U (((Rame2:posR2==1)) && ((Rame2:dirR2==1))))))) && ([] ((! (((Rame1:posR1!=NS)) && ((Rame1:dirR1==1)))) || (((Rame1:dirR1==1)) U (((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1)))))))) && ([] ((! (((Rame2:posR2!=NS)) && ((Rame2:dirR2==1)))) || (((Rame2:dirR2==1)) U (((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1)))))))) */
T0_init:
	do
	:: (! ((! (((Rame2:posR2!=NS)) && ((Rame2:dirR2==1))))) && ! ((((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1))))) && ((! ((! (((Rame1:posR1!=1)) && ((Rame1:dirR1==-(1))))))) || (((! ((! (((Rame1:posR1!=NS)) && ((Rame1:dirR1==1)))))) || (((! ((! (((Rame2:posR2!=1)) && ((Rame2:dirR2==-(1))))))) || (! ((! (((Rame2:posR2!=NS)) && ((Rame2:dirR2==1)))))))))))) -> goto accept_S7
	:: atomic { (((! ((! (((Rame1:posR1!=1)) && ((Rame1:dirR1==-(1)))))) && ! ((((Rame1:posR1==1)) && ((Rame1:dirR1==1)))) && ! (((Rame1:dirR1==-(1))))) || (((! ((! (((Rame1:posR1!=NS)) && ((Rame1:dirR1==1))))) && ! ((((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1))))) && ! (((Rame1:dirR1==1)))) || (((! ((! (((Rame2:posR2!=1)) && ((Rame2:dirR2==-(1)))))) && ! ((((Rame2:posR2==1)) && ((Rame2:dirR2==1)))) && ! (((Rame2:dirR2==-(1))))) || (! ((! (((Rame2:posR2!=NS)) && ((Rame2:dirR2==1))))) && ! ((((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1))))) && ! (((Rame2:dirR2==1)))))))))) -> assert(!(((! ((! (((Rame1:posR1!=1)) && ((Rame1:dirR1==-(1)))))) && ! ((((Rame1:posR1==1)) && ((Rame1:dirR1==1)))) && ! (((Rame1:dirR1==-(1))))) || (((! ((! (((Rame1:posR1!=NS)) && ((Rame1:dirR1==1))))) && ! ((((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1))))) && ! (((Rame1:dirR1==1)))) || (((! ((! (((Rame2:posR2!=1)) && ((Rame2:dirR2==-(1)))))) && ! ((((Rame2:posR2==1)) && ((Rame2:dirR2==1)))) && ! (((Rame2:dirR2==-(1))))) || (! ((! (((Rame2:posR2!=NS)) && ((Rame2:dirR2==1))))) && ! ((((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1))))) && ! (((Rame2:dirR2==1))))))))))) }
	:: (! ((! (((Rame2:posR2!=1)) && ((Rame2:dirR2==-(1)))))) && ! ((((Rame2:posR2==1)) && ((Rame2:dirR2==1)))) && ((! ((! (((Rame1:posR1!=1)) && ((Rame1:dirR1==-(1))))))) || (((! ((! (((Rame1:posR1!=NS)) && ((Rame1:dirR1==1)))))) || (((! ((! (((Rame2:posR2!=1)) && ((Rame2:dirR2==-(1))))))) || (! ((! (((Rame2:posR2!=NS)) && ((Rame2:dirR2==1)))))))))))) -> goto accept_S12
	:: (! ((! (((Rame1:posR1!=NS)) && ((Rame1:dirR1==1))))) && ! ((((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1)))))) -> goto accept_S17
	:: (! ((! (((Rame1:posR1!=1)) && ((Rame1:dirR1==-(1)))))) && ! ((((Rame1:posR1==1)) && ((Rame1:dirR1==1))))) -> goto accept_S22
	:: (1) -> goto T0_init
	od;
accept_S7:
	do
	:: (! ((((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1)))))) -> goto accept_S7
	:: atomic { (! ((((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1))))) && ! (((Rame2:dirR2==1)))) -> assert(!(! ((((Rame2:posR2==NS)) && ((Rame2:dirR2==-(1))))) && ! (((Rame2:dirR2==1))))) }
	od;
accept_S12:
	do
	:: (! ((((Rame2:posR2==1)) && ((Rame2:dirR2==1))))) -> goto accept_S12
	:: atomic { (! ((((Rame2:posR2==1)) && ((Rame2:dirR2==1)))) && ! (((Rame2:dirR2==-(1))))) -> assert(!(! ((((Rame2:posR2==1)) && ((Rame2:dirR2==1)))) && ! (((Rame2:dirR2==-(1)))))) }
	od;
accept_S17:
	do
	:: (! ((((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1)))))) -> goto accept_S17
	:: atomic { (! ((((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1))))) && ! (((Rame1:dirR1==1)))) -> assert(!(! ((((Rame1:posR1==NS)) && ((Rame1:dirR1==-(1))))) && ! (((Rame1:dirR1==1))))) }
	od;
accept_S22:
	do
	:: (! ((((Rame1:posR1==1)) && ((Rame1:dirR1==1))))) -> goto accept_S22
	:: atomic { (! ((((Rame1:posR1==1)) && ((Rame1:dirR1==1)))) && ! (((Rame1:dirR1==-(1))))) -> assert(!(! ((((Rame1:posR1==1)) && ((Rame1:dirR1==1)))) && ! (((Rame1:dirR1==-(1)))))) }
	od;
accept_all:
	skip
}
never p4 {    /* !(((([] ((! (((Rame1:posR1<NS)) && ((Rame1:dirR1==1)))) || (<> ((Rame1:posR1==NS))))) && ([] ((! (((Rame1:posR1>1)) && ((Rame1:dirR1==-(1))))) || (<> ((Rame1:posR1==1)))))) && ([] ((! (((Rame2:posR2<NS)) && ((Rame2:dirR2==1)))) || (<> ((Rame2:posR2==NS)))))) && ([] ((! (((Rame2:posR2>1)) && ((Rame2:dirR2==-(1))))) || (<> ((Rame2:posR2==1)))))) */
T0_init:
	do
	:: (! ((! (((Rame2:posR2<NS)) && ((Rame2:dirR2==1))))) && ! (((Rame2:posR2==NS))) && ((! ((! (((Rame1:posR1<NS)) && ((Rame1:dirR1==1)))))) || (((! ((! (((Rame1:posR1>1)) && ((Rame1:dirR1==-(1))))))) || (((! ((! (((Rame2:posR2<NS)) && ((Rame2:dirR2==1)))))) || (! ((! (((Rame2:posR2>1)) && ((Rame2:dirR2==-(1))))))))))))) -> goto accept_S7
	:: (! ((! (((Rame2:posR2>1)) && ((Rame2:dirR2==-(1)))))) && ! (((Rame2:posR2==1))) && ((! ((! (((Rame1:posR1<NS)) && ((Rame1:dirR1==1)))))) || (((! ((! (((Rame1:posR1>1)) && ((Rame1:dirR1==-(1))))))) || (((! ((! (((Rame2:posR2<NS)) && ((Rame2:dirR2==1)))))) || (! ((! (((Rame2:posR2>1)) && ((Rame2:dirR2==-(1))))))))))))) -> goto accept_S12
	:: (! ((! (((Rame1:posR1<NS)) && ((Rame1:dirR1==1))))) && ! (((Rame1:posR1==NS)))) -> goto accept_S17
	:: (! ((! (((Rame1:posR1>1)) && ((Rame1:dirR1==-(1)))))) && ! (((Rame1:posR1==1)))) -> goto accept_S22
	:: (1) -> goto T0_init
	od;
accept_S7:
	do
	:: (! (((Rame2:posR2==NS)))) -> goto accept_S7
	od;
accept_S12:
	do
	:: (! (((Rame2:posR2==1)))) -> goto accept_S12
	od;
accept_S17:
	do
	:: (! (((Rame1:posR1==NS)))) -> goto accept_S17
	od;
accept_S22:
	do
	:: (! (((Rame1:posR1==1)))) -> goto accept_S22
	od;
}
never p5 {    /* !(([] ((! (((Rame1:posR1<(NS-1))) && ((Rame1:dirR1==1)))) || (<> ((Rame1:posR1==(NS-1)))))) && ([] ((! (((Rame2:posR2<(NS-1))) && ((Rame2:dirR2==1)))) || (<> ((Rame2:posR2==(NS-1))))))) */
T0_init:
	do
	:: (! ((! (((Rame2:posR2<(NS-1))) && ((Rame2:dirR2==1))))) && ! (((Rame2:posR2==(NS-1))))) -> goto accept_S5
	:: (! ((! (((Rame1:posR1<(NS-1))) && ((Rame1:dirR1==1))))) && ! (((Rame1:posR1==(NS-1))))) -> goto accept_S10
	:: (1) -> goto T0_init
	od;
accept_S5:
	do
	:: (! (((Rame2:posR2==(NS-1))))) -> goto accept_S5
	od;
accept_S10:
	do
	:: (! (((Rame1:posR1==(NS-1))))) -> goto accept_S10
	od;
}
never p6 {    /* !(((([] (<> (((Rame1:posR1>=1)) && ((Rame1:posR1<=NS))))) && ([] (<> (((Rame1:dirR1==1)) || ((Rame1:dirR1==-(1))))))) && ([] (<> (((Rame2:posR2>=1)) && ((Rame2:posR2<=NS)))))) && ([] (<> (((Rame2:dirR2==1)) || ((Rame2:dirR2==-(1))))))) */
T0_init:
	do
	:: (! ((((Rame2:posR2>=1)) && ((Rame2:posR2<=NS))))) -> goto accept_S7
	:: (! ((((Rame2:dirR2==1)) || ((Rame2:dirR2==-(1)))))) -> goto accept_S12
	:: (! ((((Rame1:posR1>=1)) && ((Rame1:posR1<=NS))))) -> goto accept_S17
	:: (! ((((Rame1:dirR1==1)) || ((Rame1:dirR1==-(1)))))) -> goto accept_S22
	:: (1) -> goto T0_init
	od;
accept_S7:
	do
	:: (! ((((Rame2:posR2>=1)) && ((Rame2:posR2<=NS))))) -> goto accept_S7
	od;
accept_S12:
	do
	:: (! ((((Rame2:dirR2==1)) || ((Rame2:dirR2==-(1)))))) -> goto accept_S12
	od;
accept_S17:
	do
	:: (! ((((Rame1:posR1>=1)) && ((Rame1:posR1<=NS))))) -> goto accept_S17
	od;
accept_S22:
	do
	:: (! ((((Rame1:dirR1==1)) || ((Rame1:dirR1==-(1)))))) -> goto accept_S22
	od;
}
never p7 {    /* !(([] ((! ((Rame1:lieuR1==0))) || ((Rame1:portesR1==fermees)))) && ([] ((! ((Rame2:lieuR2==0))) || ((Rame2:portesR2==fermees))))) */
T0_init:
	do
	:: atomic { (((! (((! ((Rame1:lieuR1==0))) || ((Rame1:portesR1==fermees))))) || (! (((! ((Rame2:lieuR2==0))) || ((Rame2:portesR2==fermees))))))) -> assert(!(((! (((! ((Rame1:lieuR1==0))) || ((Rame1:portesR1==fermees))))) || (! (((! ((Rame2:lieuR2==0))) || ((Rame2:portesR2==fermees)))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never p8 {    /* !(([] ((! (((Rame1:lieuR1==1)) && ((Rame1:portesR1==fermees)))) || (<> ((Rame1:portesR1==ouvertes))))) && ([] ((! (((Rame2:lieuR2==1)) && ((Rame2:portesR2==fermees)))) || (<> ((Rame2:portesR2==ouvertes)))))) */
T0_init:
	do
	:: (! ((! (((Rame2:lieuR2==1)) && ((Rame2:portesR2==fermees))))) && ! (((Rame2:portesR2==ouvertes)))) -> goto accept_S5
	:: (! ((! (((Rame1:lieuR1==1)) && ((Rame1:portesR1==fermees))))) && ! (((Rame1:portesR1==ouvertes)))) -> goto accept_S10
	:: (1) -> goto T0_init
	od;
accept_S5:
	do
	:: (! (((Rame2:portesR2==ouvertes)))) -> goto accept_S5
	od;
accept_S10:
	do
	:: (! (((Rame1:portesR1==ouvertes)))) -> goto accept_S10
	od;
}
